"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_src_components_Dashboard_tsx",{

/***/ "(app-pages-browser)/./src/utils/ChemicalTankCalculation.js":
/*!**********************************************!*\
  !*** ./src/utils/ChemicalTankCalculation.js ***!
  \**********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TANK_HEIGHT: function() { return /* binding */ TANK_HEIGHT; },\n/* harmony export */   TANK_LENGTH: function() { return /* binding */ TANK_LENGTH; },\n/* harmony export */   calculateBarScreenBreath: function() { return /* binding */ calculateBarScreenBreath; },\n/* harmony export */   calculateBarScreenVolume: function() { return /* binding */ calculateBarScreenVolume; },\n/* harmony export */   calculateBreath: function() { return /* binding */ calculateBreath; },\n/* harmony export */   calculateCoagulantsTankBreath: function() { return /* binding */ calculateCoagulantsTankBreath; },\n/* harmony export */   calculateCoagulantsTankVolume: function() { return /* binding */ calculateCoagulantsTankVolume; },\n/* harmony export */   calculateEqualizationTankBreath: function() { return /* binding */ calculateEqualizationTankBreath; },\n/* harmony export */   calculateEqualizationTankVolume: function() { return /* binding */ calculateEqualizationTankVolume; },\n/* harmony export */   calculateFilterFeedTankBreath: function() { return /* binding */ calculateFilterFeedTankBreath; },\n/* harmony export */   calculateFilterFeedTankVolume: function() { return /* binding */ calculateFilterFeedTankVolume; },\n/* harmony export */   calculateFlocculantTankBreath: function() { return /* binding */ calculateFlocculantTankBreath; },\n/* harmony export */   calculateFlocculantTankVolume: function() { return /* binding */ calculateFlocculantTankVolume; },\n/* harmony export */   calculateFlowRate: function() { return /* binding */ calculateFlowRate; },\n/* harmony export */   calculateOilGreaseBreath: function() { return /* binding */ calculateOilGreaseBreath; },\n/* harmony export */   calculateOilGreaseVolume: function() { return /* binding */ calculateOilGreaseVolume; },\n/* harmony export */   calculatePHNeutralizationTankBreath: function() { return /* binding */ calculatePHNeutralizationTankBreath; },\n/* harmony export */   calculatePHNeutralizationTankVolume: function() { return /* binding */ calculatePHNeutralizationTankVolume; },\n/* harmony export */   calculateSludgeHoldingTankBreath: function() { return /* binding */ calculateSludgeHoldingTankBreath; },\n/* harmony export */   calculateSludgeHoldingTankVolume: function() { return /* binding */ calculateSludgeHoldingTankVolume; },\n/* harmony export */   calculateTreatedWaterTankBreath: function() { return /* binding */ calculateTreatedWaterTankBreath; },\n/* harmony export */   calculateTreatedWaterTankVolume: function() { return /* binding */ calculateTreatedWaterTankVolume; },\n/* harmony export */   calculateTubeSettleBreath: function() { return /* binding */ calculateTubeSettleBreath; },\n/* harmony export */   calculateTubeSettleVolume: function() { return /* binding */ calculateTubeSettleVolume; },\n/* harmony export */   calculateTubeSettlerVolume: function() { return /* binding */ calculateTubeSettlerVolume; },\n/* harmony export */   calculateUFWaterTankBreath: function() { return /* binding */ calculateUFWaterTankBreath; },\n/* harmony export */   calculateUFWaterTankVolume: function() { return /* binding */ calculateUFWaterTankVolume; }\n/* harmony export */ });\n// Helper function to ensure a number is not NaN, replacing with 0 if it is\nconst ensureNumber = (value)=>{\n    const num = isNaN(value) ? 0 : value;\n    console.log(\"Ensured number:\", num);\n    return num;\n};\n// Constants for height and length\nconst TANK_HEIGHT = 3;\nconst TANK_LENGTH = 3;\n// Volume and breath calculation functions\nconst calculateFlowRate = (capacity)=>{\n    return capacity / 20; // Example calculation\n};\nfunction calculateBarScreenVolume(flowRate, peakFlow) {\n    const volume = flowRate * 0.04167 * peakFlow;\n    console.log(\"Bar Screen Volume:\", {\n        flowRate,\n        peakFlow,\n        volume\n    });\n    return Math.max(0, volume);\n}\nfunction calculateBarScreenBreath(barScreenVolume) {\n    const breath = barScreenVolume / (TANK_HEIGHT * TANK_LENGTH);\n    console.log(\"Bar Screen Breath:\", breath);\n    return breath;\n}\nfunction calculateOilGreaseVolume(flowRate, peakFlow) {\n    const volume = flowRate * peakFlow * 20 / 60;\n    console.log(\"Oil Grease Volume:\", {\n        flowRate,\n        peakFlow,\n        volume\n    });\n    return Math.max(0, volume);\n}\nfunction calculateOilGreaseBreath(oilGreaseVolume) {\n    const breath = oilGreaseVolume / (TANK_HEIGHT * TANK_LENGTH);\n    console.log(\"Oil Grease Breath:\", breath);\n    return breath;\n}\nfunction calculateEqualizationTankVolume(flowRate) {\n    const volume = ensureNumber(flowRate) * 10; // Adjust multiplier as needed\n    console.log(\"Equalization Tank Volume:\", volume);\n    return volume;\n}\nfunction calculateEqualizationTankBreath(equalizationTankVolume) {\n    const breath = equalizationTankVolume / (TANK_HEIGHT * TANK_LENGTH);\n    console.log(\"Equalization Tank Breath:\", breath);\n    return breath;\n}\nfunction calculatePHNeutralizationTankVolume(flowRate) {\n    const volume = ensureNumber(flowRate) * 0.3333;\n    console.log(\"PH Neutralization Tank Volume:\", volume);\n    return volume;\n}\nfunction calculatePHNeutralizationTankBreath(phNeutralizationTankVolume) {\n    const breath = phNeutralizationTankVolume / (TANK_HEIGHT * TANK_LENGTH);\n    console.log(\"PH Neutralization Tank Breath:\", breath);\n    return breath;\n}\nfunction calculateCoagulantsTankVolume(flowRate) {\n    const volume = ensureNumber(flowRate) * 0.3333;\n    console.log(\"Coagulants Tank Volume:\", volume);\n    return volume;\n}\nfunction calculateCoagulantsTankBreath(coagulantsTankVolume) {\n    const breath = coagulantsTankVolume / (TANK_HEIGHT * TANK_LENGTH);\n    console.log(\"Coagulants Tank Breath:\", breath);\n    return breath;\n}\nfunction calculateFlocculantTankVolume(flowRate) {\n    const volume = ensureNumber(flowRate) * 0.3333;\n    console.log(\"Flocculant Tank Volume:\", volume);\n    return volume;\n}\nfunction calculateFlocculantTankBreath(flocculantTankVolume) {\n    const breath = flocculantTankVolume / (TANK_HEIGHT * TANK_LENGTH);\n    console.log(\"Flocculant Tank Breath:\", breath);\n    return breath;\n}\nfunction calculateTubeSettleVolume(flowRate) {\n    const volume = ensureNumber(flowRate) * 2.5; // Adjust multiplier as needed\n    console.log(\"Tube Settle Volume:\", volume);\n    return volume;\n}\nfunction calculateTubeSettleBreath(tubeSettleVolume) {\n    const breath = tubeSettleVolume / (TANK_HEIGHT * TANK_LENGTH);\n    console.log(\"Tube Settle Breath:\", breath);\n    return breath;\n}\nfunction calculateFilterFeedTankVolume(flowRate) {\n    const volume = ensureNumber(flowRate) * 2.5; // Adjust multiplier as needed\n    console.log(\"Filter Feed Tank Volume:\", volume);\n    return volume;\n}\nfunction calculateFilterFeedTankBreath(filterFeedTankVolume) {\n    const breath = filterFeedTankVolume / (TANK_HEIGHT * TANK_LENGTH);\n    console.log(\"Filter Feed Tank Breath:\", breath);\n    return breath;\n}\nfunction calculateTreatedWaterTankVolume(flowRate) {\n    const volume = ensureNumber(flowRate) * 6; // Adjust multiplier as needed\n    console.log(\"Treated Water Tank Volume:\", volume);\n    return volume;\n}\nfunction calculateTreatedWaterTankBreath(treatedWaterTankVolume) {\n    const breath = treatedWaterTankVolume / (TANK_HEIGHT * TANK_LENGTH);\n    console.log(\"Treated Water Tank Breath:\", breath);\n    return breath;\n}\nfunction calculateUFWaterTankVolume(flowRate) {\n    const volume = ensureNumber(flowRate) * 2; // Adjust multiplier as needed\n    console.log(\"UF Water Tank Volume:\", volume);\n    return volume;\n}\nfunction calculateUFWaterTankBreath(ufWaterTankVolume) {\n    const breath = ufWaterTankVolume / (TANK_HEIGHT * TANK_LENGTH);\n    console.log(\"UF Water Tank Breath:\", breath);\n    return breath;\n}\nfunction calculateSludgeHoldingTankVolume(plantCapacity, BOD, TSS) {\n    const sludgeHolder = plantCapacity * (BOD * 0.15 + TSS * 0.6) / 100000;\n    const volume = sludgeHolder * 4;\n    console.log(\"Sludge Holding Tank Volume:\", {\n        plantCapacity,\n        BOD,\n        TSS,\n        volume\n    });\n    return Math.max(0, volume);\n}\nfunction calculateSludgeHoldingTankBreath(sludgeHoldingTankVolume) {\n    const breath = sludgeHoldingTankVolume / (TANK_HEIGHT * TANK_LENGTH);\n    console.log(\"Sludge Holding Tank Breath:\", breath);\n    return breath;\n}\n// Add this new function to calculate breath\nfunction calculateBreath(volume) {\n    return volume / (TANK_HEIGHT * TANK_LENGTH);\n}\n// Ensure this function is defined\nconst calculateTubeSettlerVolume = (flowRate)=>{\n    const volume = ensureNumber(flowRate) * 2.5; // Adjust multiplier as needed\n    console.log(\"Tube Settler Volume:\", volume);\n    return volume;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/ChemicalTankCalculation.js\n"));

/***/ })

});